diff -ruN xv6/console.c xv6-public/console.c
--- xv6/console.c	2021-09-15 18:11:58.121024578 +0530
+++ xv6-public/console.c	2021-09-15 18:38:02.880432195 +0530
@@ -15,6 +15,57 @@
 #include "proc.h"
 #include "x86.h"
 
+// Added by me
+#define KEY_UP          0xE2
+#define KEY_DN          0xE3
+#define KEY_LF          0xE4
+#define KEY_RF          0xE5
+
+#define MAX_HISTORY                 (16)     
+#define MAX_COMMAND_LENGTH          (128)
+
+char command_history[MAX_HISTORY][MAX_COMMAND_LENGTH];
+int historycounter=0;
+int currentcommandid=0;
+
+int history(char* buffer, int historyId){
+
+   if(historyId<0 || historyId>=MAX_HISTORY){
+         return 2;
+   }
+   if(historyId>=historycounter){
+       return 1;
+   }
+   memmove(buffer,command_history[historyId],MAX_COMMAND_LENGTH*sizeof(char));
+   return 0;
+}
+
+
+
+
+void add_history(char *command){
+    if(command[0]!='\0'){
+        int length=strlen(command);
+        if(length>MAX_COMMAND_LENGTH){
+           length=MAX_COMMAND_LENGTH-1;
+        }
+        if(historycounter<MAX_HISTORY){
+           historycounter++;
+        }
+        else{
+           for(int i=0; i<MAX_HISTORY-1; i++){
+             memmove(command_history[i],command_history[i+1],sizeof(char)*MAX_COMMAND_LENGTH);
+           }
+        
+        }
+        memmove(command_history[historycounter-1],command,sizeof(char)*length);
+        command_history[historycounter-1][length]='\0';
+        currentcommandid=historycounter;
+    }
+
+} 
+
+
 static void consputc(int);
 
 static int panicked = 0;
@@ -162,6 +213,8 @@
   crt[pos] = ' ' | 0x0700;
 }
 
+
+
 void
 consputc(int c)
 {
@@ -184,14 +237,130 @@
   uint r;  // Read index
   uint w;  // Write index
   uint e;  // Edit index
+  uint pos; // Added by me current index
 } input;
 
 #define C(x)  ((x)-'@')  // Control-x
 
+int back_counter=0;
+
+
+void move_back_cursor(){
+  int pos;
+  
+  // get cursor position
+  outb(CRTPORT, 14);                  
+  pos = inb(CRTPORT+1) << 8;
+  outb(CRTPORT, 15);
+  pos |= inb(CRTPORT+1);    
+
+  // move back
+  pos--;
+  
+  // reset cursor
+  outb(CRTPORT, 15);
+  outb(CRTPORT+1, (unsigned char)(pos&0xFF));
+  outb(CRTPORT, 14);
+  outb(CRTPORT+1, (unsigned char )((pos>>8)&0xFF));
+  //crt[pos] = ' ' | 0x0700;
+  
+}
+
+void move_forward_cursor(){
+  int pos;
+  
+  // get cursor position
+  outb(CRTPORT, 14);                  
+  pos = inb(CRTPORT+1) << 8;
+  outb(CRTPORT, 15);
+  pos |= inb(CRTPORT+1);    
+
+  // move back
+  pos++;
+  
+ // reset cursor
+  outb(CRTPORT, 15);
+  outb(CRTPORT+1, (unsigned char)(pos&0xFF));
+  outb(CRTPORT, 14);
+  outb(CRTPORT+1, (unsigned char )((pos>>8)&0xFF));
+  //crt[pos] = ' ' | 0x0700;
+
+  
+}
+
+void insert_char(int c,int counter){
+  int pos;
+
+  // get cursor position
+  outb(CRTPORT, 14);                  
+  pos = inb(CRTPORT+1) << 8;
+  outb(CRTPORT, 15);
+  pos |= inb(CRTPORT+1);
+
+  for(int i=pos-counter; i>=pos; i--){
+      crt[i+1]=crt[i];
+  }
+  crt[pos] = (c&0xff) | 0x0700; 
+
+  // move cursor to next position
+  pos += 1;
+
+  outb(CRTPORT, 14);
+  outb(CRTPORT+1, pos>>8);
+  outb(CRTPORT, 15);
+  outb(CRTPORT+1, pos);
+}
+
+void remove_char(int counter){
+  int pos;
+  
+  // get cursor position
+  outb(CRTPORT, 14);                  
+  pos = inb(CRTPORT+1) << 8;
+  outb(CRTPORT, 15);
+  pos |= inb(CRTPORT+1);    
+
+  // move back
+  for(int i=pos-1; i<=pos-counter-1; i++){
+     crt[i]=crt[i+1];
+  }
+  crt[pos-counter]=' ' | 0x0700;
+  // reset cursor
+  pos--;
+  outb(CRTPORT, 15);
+  outb(CRTPORT+1, (unsigned char)(pos&0xFF));
+  outb(CRTPORT, 14);
+  outb(CRTPORT+1, (unsigned char )((pos>>8)&0xFF));
+}
+
+void all_remove_char(){
+  int pos;
+  
+  // get cursor position
+  outb(CRTPORT, 14);                  
+  pos = inb(CRTPORT+1) << 8;
+  outb(CRTPORT, 15);
+  pos |= inb(CRTPORT+1);    
+
+  // move back
+  pos--;
+
+  // reset cursor
+  outb(CRTPORT, 15);
+  outb(CRTPORT+1, (unsigned char)(pos&0xFF));
+  outb(CRTPORT, 14);
+  outb(CRTPORT+1, (unsigned char )((pos>>8)&0xFF));
+  crt[pos] = ' ' | 0x0700;
+}
+
+
+
 void
 consoleintr(int (*getc)(void))
 {
   int c, doprocdump = 0;
+  char buffer[MAX_COMMAND_LENGTH];
+  int x;
 
   acquire(&cons.lock);
   while((c = getc()) >= 0){
@@ -208,20 +377,125 @@
       }
       break;
     case C('H'): case '\x7f':  // Backspace
+     if(input.pos==input.e){
       if(input.e != input.w){
         input.e--;
+        input.pos--;
         consputc(BACKSPACE);
       }
+      }
+      else if(input.pos!=input.w){
+           remove_char(back_counter);
+          for(int i=input.pos-1; i<=input.e-1; i++){
+            input.buf[i]=input.buf[i+1];
+          }
+          input.e--;
+          input.pos--;
+      }
+      break;
+    case KEY_LF:
+      if(input.pos>input.r){
+          input.pos--;
+          back_counter--;
+          move_back_cursor();
+      }
       break;
+    case KEY_RF:
+      if(input.pos<input.e){
+           input.pos++;
+           back_counter++;
+           move_forward_cursor();
+      }
+      break; 
+    case KEY_UP:
+      if(currentcommandid==0){ }
+      else if(currentcommandid>0){
+          for(int i=input.pos; i<input.e; i++){
+            move_forward_cursor();
+          }
+          while(input.e>input.w){
+            input.e--;
+            all_remove_char();
+          }
+          for(int i=0; i<strlen(command_history[currentcommandid-1]); i++){
+             x=command_history[currentcommandid-1][i];
+             cgaputc(x);
+             input.buf[input.e++]=x;
+          }
+          currentcommandid--;
+          input.pos=input.e;
+      }
+      break;
+    case KEY_DN:
+      if(currentcommandid==historycounter-1){
+          for(int i=input.pos; i<input.e; i++){
+            move_forward_cursor();
+          }
+          while(input.e>input.w){
+            input.e--;
+            all_remove_char();
+          }
+          currentcommandid=historycounter;
+      }
+      else if(currentcommandid<historycounter-1){
+          for(int i=input.pos; i<input.e; i++){
+            move_forward_cursor();
+          }
+          while(input.e>input.w){
+            input.e--;
+            all_remove_char();
+          }
+          for(int i=0; i<strlen(command_history[currentcommandid+1]); i++){
+             x=command_history[currentcommandid+1][i];
+             cgaputc(x);
+             input.buf[input.e++]=x;
+          }
+          currentcommandid++;
+          input.pos=input.e;
+          
+      }
+      break;     
     default:
       if(c != 0 && input.e-input.r < INPUT_BUF){
         c = (c == '\r') ? '\n' : c;
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
         input.buf[input.e++ % INPUT_BUF] = c;
         consputc(c);
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+        
+        back_counter=0;
+        for(int i=input.w,k=0; i<input.e-1; i++,k++){
+             buffer[k]=input.buf[i % INPUT_BUF];
+        }
+        buffer[(input.e-1-input.w)%INPUT_BUF]='\0';
+        
+        add_history(buffer);
+        
           input.w = input.e;
+          input.pos=input.e;
           wakeup(&input.r);
         }
+        else{
+            if(back_counter==0){
+              input.buf[input.e++ % INPUT_BUF] = c;
+              input.pos++;
+        consputc(c);
+            }
+            else{
+              insert_char(c, back_counter); 
+              for(int k=input.e+1; k >= input.pos; k--){
+              input.buf[(k + 1) % INPUT_BUF] = input.buf[k % INPUT_BUF];
+              }
+
+            //insert
+            input.buf[(input.pos) % INPUT_BUF] = c;
+
+            input.e++;
+            input.pos++;
+
+            //insert the char into CRT propoly position
+            
+            }
+        }
       }
       break;
     }
