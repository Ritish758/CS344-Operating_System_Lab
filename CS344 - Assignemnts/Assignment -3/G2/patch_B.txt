diff --git a/Makefile b/Makefile
index 09d790c..9223691 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_sanity\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/defs.h b/defs.h
index 82fb982..16bcf25 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct circular_queue;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,19 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+extern struct circular_queue cq;
+int cq_push(struct proc *p);
+struct proc* cq_pop();
+extern struct circular_queue cq1;
+int cq_push1(struct proc *p);
+struct proc* cq_pop1();
+void           swap_out_process_function();
+void           swap_in();
+
+extern int     swap_out_process_exists;
+extern int     swap_in_process_exists;
+
+void           create_kernel_process(const char *name, void (*entrypoint)());
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -164,7 +178,7 @@ void            idtinit(void);
 extern uint     ticks;
 void            tvinit(void);
 extern struct spinlock tickslock;
-
+extern struct spinlock swaplock;
 // uart.c
 void            uartinit(void);
 void            uartintr(void);
@@ -185,6 +199,9 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+extern struct spinlock sleeping_channel_lock;
+extern int      sleeping_channel_count;
+extern char*    sleeping_channel;
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kalloc.c b/kalloc.c
index 14cd4f4..fe0af20 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -74,6 +74,16 @@ kfree(char *v)
   kmem.freelist = r;
   if(kmem.use_lock)
     release(&kmem.lock);
+
+  // wake up processes sleeping on a sleeping channel
+  if(kmem.use_lock)
+    acquire(&sleeping_channel_lock);
+  if(sleeping_channel_count){
+    wakeup(sleeping_channel);
+    sleeping_channel_count = 0;
+  }
+  if(kmem.use_lock)
+    release(&sleeping_channel_lock);
 }
 
 // Allocate one 4096-byte page of physical memory.
diff --git a/mmu.h b/mmu.h
index a82d8e2..8b50067 100644
--- a/mmu.h
+++ b/mmu.h
@@ -95,6 +95,7 @@ struct segdesc {
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/proc.c b/proc.c
index 806b1b1..0cd7a64 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,353 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "fcntl.h"
+#include "stat.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "file.h"
+
+int swap_out_process_exists = 0;
+int swap_in_process_exists=0;
+
+int mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+
+int
+proc_close(int fd)
+{
+  struct file *f;
+
+  if(fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
+    return -1;
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int
+proc_write(int fd, char *p, int n)
+{
+  struct file *f;
+
+  if(fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
+    return -1;
+  return filewrite(f, p, n);
+}
+
+static struct inode*
+proc_create(char *path, short type, short major, short minor)
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+static int
+proc_fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+int
+proc_open(char *path, int omode)
+{
+  int fd;
+  struct file *f;
+  struct inode *ip;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = proc_create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = proc_fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+}
+
+void itoa(int x, char *c){
+  if (x == 0){
+    c[0] = '0';
+    c[1] = '\0';
+    return;
+  }
+  int i = 0;
+  while (x > 0){
+    c[i] = x % 10 + '0';
+    i++;
+    x /= 10;
+  }
+
+  c[i] = '\0';
+
+  for(int j = 0; j < i/2; j++){
+    char k = c[j];
+    c[j] = c[i - j - 1];
+    c[i - j - 1] = k;
+  }
+}
+
+struct circular_queue{
+  struct spinlock lock;
+  struct proc* queue[NPROC];
+  int head;
+  int tail;
+};
+
+// circular process queue for swapping out requests
+struct circular_queue cq;
+
+int cq_push(struct proc *p){
+  acquire(&cq.lock);
+  if ((cq.tail + 1) % NPROC == cq.head){
+    release(&cq.lock);
+    return 0;
+  }
+  cq.queue[cq.tail] = p;
+  cq.tail = (cq.tail + 1) % NPROC;
+  release(&cq.lock);
+
+  return 1;
+}
+
+struct proc* cq_pop(){
+  acquire(&cq.lock);
+  if(cq.head == cq.tail){
+    release(&cq.lock);
+    return 0;
+  }
+  struct proc *p = cq.queue[cq.head];
+  cq.head = (cq.head + 1) % NPROC;
+  release(&cq.lock);
+  return p;
+}
+
+struct circular_queue cq1;
+
+int cq_push1(struct proc *p){
+  acquire(&cq1.lock);
+  if ((cq1.tail + 1) % NPROC == cq1.head){
+    release(&cq1.lock);
+    return 0;
+  }
+  cq1.queue[cq1.tail] = p;
+  cq1.tail = (cq1.tail + 1) % NPROC;
+  release(&cq1.lock);
+
+  return 1;
+}
+
+struct proc* cq_pop1(){
+  acquire(&cq1.lock);
+  if(cq1.head == cq1.tail){
+    release(&cq1.lock);
+    return 0;
+  }
+  struct proc *p = cq1.queue[cq1.head];
+  cq1.head = (cq1.head + 1) % NPROC;
+  release(&cq1.lock);
+  return p;
+}
+
+void swap_out_process_function(){
+  acquire(&cq.lock);
+  while (cq.head != cq.tail){
+    struct proc *p = cq_pop();
+
+    pde_t *pd = p->pgdir;
+    for(int i = 0; i < NPDENTRIES; i++){
+
+      // skip page table if accessed
+      if(pd[i] & PTE_A)
+        continue;
+      pte_t *pt = (pte_t *) P2V(PTE_ADDR(pd[i]));
+      for(int j = 0; j < NPTENTRIES; j++){
+        // skip if found
+        if((pt[j] & PTE_A) || !(pt[j] & PTE_P))
+          continue;
+        pte_t *pte = (pte_t *) P2V(PTE_ADDR(pt[j]));
+
+        // for file name
+        int pid = p->pid;
+        int virt = ((1 << 22) * i) + ((1 << 12) * j);
+
+        // file name
+        char c[50];
+        itoa(pid, c);
+        int x = strlen(c);
+        c[x] = '_';
+        itoa(virt, c + x + 1);
+        safestrcpy(c + strlen(c), ".swp", 5);
+
+        // file management
+        int fd = proc_open(c, O_CREATE | O_RDWR);
+        if (fd < 0){
+          cprintf("Error creating or opening file: %s\n", c);
+          panic("swap out process");
+        }
+
+        if(proc_write(fd, (char *) pte, PGSIZE) != PGSIZE){
+          cprintf("Error writing to file: %s\n", c);
+          panic("swap out process");
+        }
+        proc_close(fd);
+
+        kfree((char *) pte);
+        memset(&pt[j], 0, sizeof(pt[j]));
+
+        // mark this page as swapped out
+        pt[j] = pt[j] ^ 0x008;
+
+        break;
+      }
+    }
+  }
+  release(&cq.lock);
+
+  struct proc *p;
+  if ((p = myproc()) == 0)
+    panic("swap out process");
+
+  swap_out_process_exists = 0;
+  p->parent = 0;
+  p->name[0] = '*';
+  p->killed = 0;
+  p->state = UNUSED;
+  sched();
+}
+
+
+int read_process(int fd, int n, char *p)
+{
+  struct file *fl;
+  if(fd < 0 || fd >= NOFILE)return -1;
+  fl =myproc()->ofile[fd];
+  if(fl==0)return -1;
+  return fileread(fl, p, n);
+
+}
+
+void swap_in(){
+
+	acquire(&cq1.lock);
+	while(cq1.head!=cq1.tail){
+		struct proc *p=cq_pop1();
+
+		int process_id=p->pid;
+		int va=PTE_ADDR(p->va);
+
+		char pagename[50];
+	    itoa(process_id,pagename);
+	    int length =strlen(pagename);
+	    pagename[length]='_';
+	    itoa(va,pagename+length+1);
+	    safestrcpy(pagename+strlen(pagename),".swp",5);
+
+	    int fd=proc_open(pagename,O_RDONLY);
+	    if(fd<0){
+		release(&cq1.lock);
+		cprintf("Page could not be found in memory: %s\n", pagename);
+		panic("swap in failed");
+	    }
+	    char *mem=kalloc();
+	    read_process(fd,PGSIZE,mem);
+      int x = PTE_W|PTE_U;
+      int mp = mappages(p->pgdir, (void *)va, PGSIZE, V2P(mem),x );
+	    if(mp<0){
+		release(&cq1.lock);
+		panic("page mapping");
+	    }
+	    wakeup(p);
+	}
+
+    release(&cq1.lock);
+    struct proc *p = myproc();
+	if(p==0)
+	  panic("swap in failed");
+
+	swap_in_process_exists=0;
+	p->parent = 0;
+	p->name[0] = '*';
+	p->killed = 0;
+	p->state = UNUSED;
+	sched();
+
+}
+
 
 struct {
   struct spinlock lock;
@@ -24,6 +371,9 @@ void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  initlock(&cq.lock, "cq");
+  initlock(&sleeping_channel_lock, "sleeping_channel");
+  initlock(&cq1.lock, "cq1");
 }
 
 // Must be called with interrupts disabled
@@ -117,9 +467,61 @@ found:
 
 //PAGEBREAK: 32
 // Set up first user process.
+
+void create_kernel_process(const char *name, void (*entrypoint)())
+{
+
+  struct proc *kp  = allocproc();
+  if(kp == 0){
+    panic("Failed to allocate kernel process.");
+  }
+  kp->pgdir = setupkvm();
+  if(kp->pgdir == 0)
+  {
+	kfree(kp->kstack);
+    kp->kstack = 0;
+    kp->state = UNUSED;
+    panic("Failed to setup pgdir for kernel process.");
+  }
+  kp->sz = PGSIZE;
+  kp->parent = initproc;
+  memset(kp->tf, 0, sizeof(*kp->tf));
+  kp->tf->cs = (SEG_KCODE << 3) | DPL_USER;
+  kp->tf->ds = (SEG_KDATA << 3) | DPL_USER;
+  kp->tf->es = kp->tf->ds;
+  kp->tf->ss = kp->tf->ds;
+  kp->tf->eflags = FL_IF;
+  kp->tf->esp = PGSIZE;
+  kp->tf->eip = 0;
+  kp->tf->eax = 0;
+  kp->cwd = namei("/");
+
+  safestrcpy(kp->name, name, sizeof(name));
+
+
+  acquire(&ptable.lock);
+
+	kp->context->eip = (uint)entrypoint;
+  kp->state = RUNNABLE;
+
+  release(&ptable.lock);
+
+  return;
+}
+
 void
 userinit(void)
 {
+  acquire(&cq.lock);
+  cq.head = 0;
+  cq.tail = 0;
+  release(&cq.lock);
+
+  acquire(&cq1.lock);
+  cq1.head = 0;
+  cq1.tail = 0;
+  release(&cq1.lock);
+
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
@@ -333,9 +735,34 @@ scheduler(void)
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+
+      // if the swapped out process has stopped running, free its stack
+      if(p->state == UNUSED && p->name[0] == '*'){
+        kfree(p->kstack);
+        p->kstack = 0;
+        p->name[0] = 0;
+        p->pid = 0;
+      }
+
       if(p->state != RUNNABLE)
         continue;
 
+      for(int i = 0; i < NPDENTRIES; i++){
+        // if PDE were accessed
+
+        if(((p->pgdir)[i]) & PTE_P && ((p->pgdir)[i]) & PTE_A){
+
+          pte_t *pt = (pte_t *) P2V(PTE_ADDR((p->pgdir)[i]));
+
+          for(int j = 0; j < NPTENTRIES; j++){
+            if(pt[j] & PTE_A){
+              pt[j] ^= PTE_A;
+            }
+          }
+          ((p->pgdir)[i]) ^= PTE_A;
+        }
+      }
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
diff --git a/proc.h b/proc.h
index 1647114..8faa47f 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int va;                      //Virtual Address of the process
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/sanity.c b/sanity.c
new file mode 100644
index 0000000..99d4f13
--- /dev/null
+++ b/sanity.c
@@ -0,0 +1,66 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include <stddef.h>
+
+int main(int argc, char *argv[])
+{
+
+	int *add_list[10];
+	int id_list[100];
+	int counter = 0;
+	for (int i = 0; i < 20; i++)
+	{
+		if (fork() == 0)
+		{
+			counter = counter + 1;
+			for (int j = 0; j < 10; j++)
+			{
+				int *addr = (int *)malloc(4096);
+				int p_id;
+				if ((add_list[j] = addr) == NULL)
+				{
+					p_id = getpid();
+					printf(1, "the process ID is: %d\n", p_id);
+					break;
+				}
+
+				p_id = getpid();
+				id_list[counter] = p_id;
+
+				for (int k = 0; k < 1024; k++)
+				{
+					*(addr + k)  = p_id * 100000 + j * 10000 + k;
+				}
+				if (j == 0)
+					printf(1, "block 1 index : %d, Beginning Address : %p , process ID : %d\n", counter, add_list[j], p_id);
+				if (j == 4)
+					printf(1, "block 5 index : %d, Beginning Address : %p , process ID : %d\n", counter, add_list[j], p_id);
+				if (j == 9)
+					printf(1, "block 10 index : %d, Beginning Address : %p , process ID : %d\n", counter, add_list[j], p_id);
+			}
+		}
+		else
+			break;
+	}
+
+	while (wait() != -1); // Execute all the child process
+
+	if (counter == 0)
+		exit();
+
+	for (int i = 0; i < 10; i++)
+	{
+		if (i == 0)
+			printf(1, "Beginning Address : %p ,Process ID: %d, 100th value of the 1st block: %d \n",  add_list[i], id_list[counter],*(add_list[i]+100));
+		if (i == 4)
+			printf(1, "Beginning Address : %p ,Process ID: %d, 100th value of the 5th block: %d \n",  add_list[i], id_list[counter],*(add_list[i]+100));
+		if (i == 9)
+			printf(1, "Beginning Address : %p ,Process ID: %d, 100th value of the 10th block: %d \n",  add_list[i], id_list[counter],*(add_list[i]+100));
+
+	}
+	counter--;
+
+	exit();
+}
\ No newline at end of file
diff --git a/trap.c b/trap.c
index 41c66eb..c23cd4c 100644
--- a/trap.c
+++ b/trap.c
@@ -14,6 +14,28 @@ extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
 
+struct spinlock swaplock;
+
+void pfhandling(){
+  struct proc *p=myproc();
+  int va = rcr2();
+  acquire(&swaplock);
+  sleep(p,&swaplock);
+  pde_t *pde = &(p->pgdir)[PDX(va)];
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+
+  if((pgtab[PTX(va)])&0x008){
+    p->va = va;
+    cq_push1(p);
+    if(swap_in_process_exists==0)
+    {
+      swap_in_process_exists=1;
+      create_kernel_process("swap_in_process", &swap_in);
+    }
+  } else {
+    exit();
+  }
+}
 void
 tvinit(void)
 {
@@ -77,6 +99,9 @@ trap(struct trapframe *tf)
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
+  case T_PGFLT:
+    pfhandling();
+    break;
 
   //PAGEBREAK: 13
   default:
diff --git a/vm.c b/vm.c
index 7134cff..223e989 100644
--- a/vm.c
+++ b/vm.c
@@ -6,10 +6,15 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#include "spinlock.h"
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
 
+struct spinlock sleeping_channel_lock;
+int sleeping_channel_count = 0;
+char *sleeping_channel;
+
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
@@ -57,7 +62,7 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
@@ -233,8 +238,21 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
   for(; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
-      cprintf("allocuvm out of memory\n");
+      // cprintf("allocuvm out of memory\n");
       deallocuvm(pgdir, newsz, oldsz);
+
+      // SLEEP
+      myproc()->state = SLEEPING;
+      acquire(&sleeping_channel_lock);
+      myproc()->chan=sleeping_channel;
+      sleeping_channel_count++;
+      release(&sleeping_channel_lock);
+
+      cq_push(myproc());
+      if(!swap_out_process_exists){
+        swap_out_process_exists = 1;
+        create_kernel_process("swap_out_process", &swap_out_process_function);
+      }
       return 0;
     }
     memset(mem, 0, PGSIZE);
